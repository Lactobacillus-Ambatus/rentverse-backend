generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}


/// Master jenis properti (mis: Apartemen, Rumah, Studio).
/// Dibuat terpisah agar bisa dikelola via admin tanpa redeploy.
model PropertyType {
  id          String     @id @default(uuid())
  code        String     @unique
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  properties  Property[]

  @@map("property_types")
}

/// Master fasilitas/amenitas (mis: AC, Kolam Renang).
model Amenity {
  id         String            @id @default(uuid())
  name       String            @unique
  category   String?
  properties PropertyAmenity[]

  @@map("amenities")
}

/// Akun pengguna (tenant, landlord, admin).
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  firstName        String            @default("")
  lastName         String            @default("")
  name             String            // Computed field (firstName + lastName) for backward compatibility
  dateOfBirth      DateTime?
  phone            String?
  password         String
  role             Role              @default(USER)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  verifiedAt       DateTime?
  
  // OAuth IDs
  googleId         String?           @unique
  facebookId       String?           @unique
  appleId          String?           @unique
  githubId         String?           @unique
  twitterId        String?           @unique
  
  signatures       ESignature[]
  leasesAsLandlord Lease[]           @relation("LandlordLeases")
  leasesAsTenant   Lease[]           @relation("TenantLeases")
  approvals        ListingApproval[] @relation("ReviewerApprovals")
  payments         Payment[]
  properties       Property[]        @relation("OwnerProperties")
  propertyViews    PropertyView[]    @relation("PropertyViews")
  propertyRatings  PropertyRating[]  @relation("PropertyRatings")
  propertyFavorites PropertyFavorite[] @relation("PropertyFavorites")

  @@map("users")
}



/// Listing properti yang ditawarkan (detail fisik, lokasi, harga).
/// Gambar/Foto disimpan langsung di kolom `images` (array URL).
model Property {
  id             String                   @id @default(uuid())
  title          String
  description    String?
  address        String
  city           String
  state          String
  zipCode        String
  country        String                   @default("ID")
  price          Decimal                  @db.Decimal(12, 2)
  currencyCode   String                   @default("IDR")
  bedrooms       Int                      @default(0)
  bathrooms      Int                      @default(0)
  areaSqm        Float?
  furnished      Boolean                  @default(false)
  isAvailable    Boolean                  @default(true)
  /// Kumpulan URL gambar untuk listing ini (urutan = urutan tampilan).
  images         String[]                 @default([])
  
  // Informasi lokasi dan geografis
  latitude       Float?
  longitude      Float?
  placeId        String?
  geom           Unsupported("geometry")? @map("geom")
  
  // Informasi developer/proyek (opsional)
  projectName    String?
  developer      String?
  
  // Metadata sistem
  code           String                   @unique
  status         ListingStatus            @default(DRAFT)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  
  // Relasi
  ownerId        String
  propertyTypeId String
  
  leases         Lease[]
  approvals      ListingApproval[]
  predictions    PricePrediction[]
  views          PropertyView[]
  ratings        PropertyRating[]
  favorites      PropertyFavorite[]
  owner          User                     @relation("OwnerProperties", fields: [ownerId], references: [id], onDelete: Cascade)
  propertyType   PropertyType             @relation(fields: [propertyTypeId], references: [id])
  amenities      PropertyAmenity[]

  @@index([latitude, longitude])
  @@index([city, state, country])
  @@index([status, isAvailable])
  @@map("properties")
}

/// Tabel pivot N:N antara Property dan Amenity.
model PropertyAmenity {
  propertyId String
  amenityId  String
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([propertyId, amenityId])
  @@map("property_amenities")
}

/// Riwayat dan keputusan review listing oleh admin.
model ListingApproval {
  id         String         @id @default(uuid())
  propertyId String
  reviewerId String?
  status     ApprovalStatus @default(PENDING)
  notes      String?
  decidedAt  DateTime?
  createdAt  DateTime       @default(now())
  property   Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  reviewer   User?          @relation("ReviewerApprovals", fields: [reviewerId], references: [id])

  @@index([propertyId, status])
  @@map("listing_approvals")
}

/// Kontrak sewa jangka waktu antara landlord dan tenant.
model Lease {
  id              String           @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  rentAmount      Decimal          @db.Decimal(12, 2)
  currencyCode    String           @default("IDR")
  securityDeposit Decimal?         @db.Decimal(12, 2)
  status          LeaseStatus      @default(DRAFT)
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  propertyId      String
  tenantId        String
  landlordId      String
  invoices        Invoice[]
  landlord        User             @relation("LandlordLeases", fields: [landlordId], references: [id])
  property        Property         @relation(fields: [propertyId], references: [id])
  tenant          User             @relation("TenantLeases", fields: [tenantId], references: [id])
  agreement       RentalAgreement?

  @@index([propertyId, status])
  @@index([tenantId])
  @@index([landlordId])
  @@map("leases")
}

/// Dokumen tagihan untuk lease (sewa/beban lainnya).
model Invoice {
  id           String        @id @default(uuid())
  leaseId      String
  type         InvoiceType   @default(RENT)
  amount       Decimal       @db.Decimal(12, 2)
  currencyCode String        @default("IDR")
  dueDate      DateTime
  status       InvoiceStatus @default(DUE)
  issuedAt     DateTime      @default(now())
  paidAt       DateTime?
  memo         String?
  lease        Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  payments     Payment[]

  @@index([leaseId, status, dueDate])
  @@map("invoices")
}

/// Pencatatan pembayaran invoice (mendukung cicilan/multi-part).
model Payment {
  id        String        @id @default(uuid())
  invoiceId String
  amount    Decimal       @db.Decimal(12, 2)
  method    PaymentMethod @default(BANK_TRANSFER)
  status    PaymentStatus @default(PENDING)
  paidAt    DateTime?
  txnRef    String?
  createdAt DateTime      @default(now())
  payerId   String?
  invoice   Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  payer     User?         @relation(fields: [payerId], references: [id])

  @@index([invoiceId, status])
  @@map("payments")
}

/// Perjanjian sewa (hasil generate PDF) untuk satu lease.
model RentalAgreement {
  id              String            @id @default(uuid())
  leaseId         String            @unique
  templateVersion String
  pdfUrl          String?
  fileHash        String?
  generatedAt     DateTime          @default(now())
  clauses         AgreementClause[]
  signatures      ESignature[]
  lease           Lease             @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@map("rental_agreements")
}

/// Master klausul kontrak yang dapat diaktif/nonaktifkan per perjanjian.
model Clause {
  id         String            @id @default(uuid())
  key        String            @unique
  title      String
  body       String
  category   String?
  isDefault  Boolean           @default(false)
  agreements AgreementClause[]

  @@map("clauses")
}

/// Pivot pemilihan klausul untuk satu perjanjian sewa.
model AgreementClause {
  id          String          @id @default(uuid())
  agreementId String
  clauseId    String
  enabled     Boolean         @default(true)
  agreement   RentalAgreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  clause      Clause          @relation(fields: [clauseId], references: [id], onDelete: Cascade)

  @@unique([agreementId, clauseId])
  @@map("agreement_clauses")
}

/// Pencatatan proses tanda tangan elektronik.
model ESignature {
  id          String          @id @default(uuid())
  agreementId String
  signerId    String?
  role        SignerRole
  provider    ESignProvider   @default(INTERNAL)
  envelopeId  String?
  status      ESignStatus     @default(PENDING)
  signedAt    DateTime?
  createdAt   DateTime        @default(now())
  agreement   RentalAgreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  signer      User?           @relation(fields: [signerId], references: [id])

  @@index([agreementId, status])
  @@map("e_signatures")
}

/// Log prediksi harga (input mentah, harga prediksi, confidence, versi model).
model PricePrediction {
  id             String    @id @default(uuid())
  propertyId     String?
  inputs         Json
  predictedPrice Decimal   @db.Decimal(12, 2)
  confidence     Float
  modelVersion   String
  createdAt      DateTime  @default(now())
  property       Property? @relation(fields: [propertyId], references: [id])

  @@index([propertyId, modelVersion])
  @@map("price_predictions")
}

/// Log views/kunjungan ke detail property untuk analytics dan tracking popularitas.
model PropertyView {
  id         String    @id @default(uuid())
  propertyId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  viewedAt   DateTime  @default(now())
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?     @relation("PropertyViews", fields: [userId], references: [id], onDelete: SetNull)

  @@index([propertyId, viewedAt])
  @@index([userId])
  @@map("property_views")
}

/// Rating dan review property oleh user yang sudah login.
model PropertyRating {
  id         String    @id @default(uuid())
  propertyId String
  userId     String
  rating     Int       // 1-5 stars
  comment    String?   // Optional review text
  ratedAt    DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User      @relation("PropertyRatings", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId]) // One rating per user per property
  @@index([propertyId])
  @@index([userId])
  @@map("property_ratings")
}

/// Favorit property oleh user yang sudah login.
model PropertyFavorite {
  id          String    @id @default(uuid())
  propertyId  String
  userId      String
  favoritedAt DateTime  @default(now())
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User      @relation("PropertyFavorites", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId]) // One favorite per user per property
  @@index([propertyId])
  @@index([userId])
  @@index([userId, favoritedAt]) // For user's favorites list ordered by date
  @@map("property_favorites")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

/// Peran pengguna di sistem.
enum Role {
  USER
  ADMIN
}

/// Status listing untuk alur publikasi/approval.
enum ListingStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
}

/// Status approval per-riwayat keputusan admin.
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

/// Status siklus kontrak sewa.
enum LeaseStatus {
  DRAFT
  ACTIVE
  TERMINATED
  CANCELLED
  COMPLETED
}

/// Jenis invoice/tagihan dalam sewa.
enum InvoiceType {
  RENT
  DEPOSIT
  UTILITY
  OTHER
}

/// Status invoice (penagihan).
enum InvoiceStatus {
  DUE
  PAID
  VOID
  REFUNDED
}

/// Metode pembayaran yang didukung.
enum PaymentMethod {
  BANK_TRANSFER
  CASH
  EWALLET
  CREDIT_CARD
}

/// Status transaksi pembayaran.
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

/// Peran penanda tangan dalam perjanjian sewa (peran dalam kontrak, bukan role sistem).
enum SignerRole {
  LANDLORD
  TENANT
}

/// Penyedia tanda tangan elektronik (internal/eksternal).
enum ESignProvider {
  INTERNAL
  DOCUSIGN
}

/// Status proses tanda tangan elektronik.
enum ESignStatus {
  PENDING
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}
