// prisma/schema.prisma
// Skema database untuk RENTVERSE (PostgreSQL + Prisma)
// - PropertyType sebagai master table (bukan enum).
// - Gambar properti disimpan langsung pada kolom array `images` di model Property.
// - Mendukung prefill dari Project, workflow approval, kontrak sewa (Lease),
//   penagihan (Invoice/Payment), perjanjian sewa (RentalAgreement + klausul + e-sign),
//   serta log prediksi harga (PricePrediction).

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------
// ENUM: Status & Peran (cenderung stabil, aman pakai enum)
// -----------------------------------------------------

/// Peran pengguna di sistem.
enum Role {
  ADMIN
  LANDLORD
  TENANT
}

/// Status listing untuk alur publikasi/approval.
enum ListingStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
}

/// Status approval per-riwayat keputusan admin.
enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

/// Status siklus kontrak sewa.
enum LeaseStatus {
  DRAFT
  ACTIVE
  TERMINATED
  CANCELLED
  COMPLETED
}

/// Jenis invoice/tagihan dalam sewa.
enum InvoiceType {
  RENT
  DEPOSIT
  UTILITY
  OTHER
}

/// Status invoice (penagihan).
enum InvoiceStatus {
  DUE
  PAID
  VOID
  REFUNDED
}

/// Metode pembayaran yang didukung.
enum PaymentMethod {
  BANK_TRANSFER
  CASH
  EWALLET
  CREDIT_CARD
}

/// Status transaksi pembayaran.
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

/// Peran penanda tangan dalam perjanjian sewa.
enum SignerRole {
  LANDLORD
  TENANT
}

/// Penyedia tanda tangan elektronik (internal/eksternal).
enum ESignProvider {
  INTERNAL
  DOCUSIGN
}

/// Status proses tanda tangan elektronik.
enum ESignStatus {
  PENDING
  VIEWED
  SIGNED
  DECLINED
  EXPIRED
}

// -----------------------------------------------------
// MASTER DATA
// -----------------------------------------------------

/// Master jenis properti (mis: Apartemen, Rumah, Studio).
/// Dibuat terpisah agar bisa dikelola via admin tanpa redeploy.
model PropertyType {
  id          String     @id @default(uuid())
  code        String     @unique // slug/kode ringkas, mis: "APARTMENT"
  name        String     // nama tampilan, mis: "Apartemen"
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relasi
  properties  Property[]
  projects    Project[]  @relation("ProjectDefaultType")

  @@map("property_types")
}

/// Master fasilitas/amenitas (mis: AC, Kolam Renang).
model Amenity {
  id       String @id @default(uuid())
  name     String @unique
  category String?

  // Relasi N:N ke Property melalui PropertyAmenity
  properties PropertyAmenity[]

  @@map("amenities")
}

// -----------------------------------------------------
// AKUN & IDENTITAS
// -----------------------------------------------------

/// Akun pengguna (tenant, landlord, admin).
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String
  phone      String?
  password   String
  role       Role      @default(TENANT)
  isActive   Boolean   @default(true)
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relasi
  properties       Property[]        @relation("OwnerProperties")
  leasesAsTenant   Lease[]           @relation("TenantLeases")
  leasesAsLandlord Lease[]           @relation("LandlordLeases")
  approvals        ListingApproval[] @relation("ReviewerApprovals")
  payments         Payment[]
  signatures       ESignature[]

  @@map("users")
}

// -----------------------------------------------------
// KATALOG PROYEK (prefill listing dari developer/proyek)
// -----------------------------------------------------

/// Sumber data prefill listing (proyek/developer) dan lokasi.
model Project {
  id          String   @id @default(uuid())
  name        String
  developer   String?
  description String?
  address     String?
  city        String?
  state       String?
  country     String?  @default("ID")
  postalCode  String?
  placeId     String?
  latitude    Float?
  longitude   Float?

  // Default untuk prefill Property baru
  defaultBedrooms   Int?
  defaultBathrooms  Int?
  defaultSizeSqm    Float?
  defaultPrice      Decimal? @db.Decimal(12,2)
  defaultAmenities  String[] @default([])

  // Tipe default (relasi ke PropertyType, opsional)
  defaultPropertyTypeId String?
  defaultPropertyType   PropertyType? @relation("ProjectDefaultType", fields: [defaultPropertyTypeId], references: [id])

  sampleDataUrl String? // jika punya seed/dataset preset

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  properties Property[]

  @@index([city, state, country])
  @@map("projects")
}

// -----------------------------------------------------
// LISTING PROPERTI
// -----------------------------------------------------

/// Listing properti yang ditawarkan (detail fisik, lokasi, harga).
/// Gambar/Foto disimpan langsung di kolom `images` (array URL).
model Property {
  id            String        @id @default(uuid())
  code          String        @unique // slug/kode listing publik
  title         String
  description   String?
  address       String
  city          String
  state         String
  country       String        @default("ID")
  zipCode       String
  placeId       String?
  latitude      Float?
  longitude     Float?

  price         Decimal       @db.Decimal(12, 2)
  currencyCode  String        @default("IDR")
  bedrooms      Int           @default(0)
  bathrooms     Int           @default(0)
  areaSqm       Float?
  furnished     Boolean       @default(false)
  isAvailable   Boolean       @default(true)
  status        ListingStatus @default(DRAFT)

  /// Kumpulan URL gambar untuk listing ini (urutan = urutan tampilan).
  images        String[]      @default([])

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relasi
  /// Pemilik/landlord dari listing ini.
  owner         User          @relation("OwnerProperties", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String

  /// Opsional: referensi ke proyek/developer untuk prefill.
  project       Project?      @relation(fields: [projectId], references: [id])
  projectId     String?

  /// Tipe properti (master table terpisah agar mudah dikelola).
  propertyType   PropertyType @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId String

  amenities     PropertyAmenity[]
  leases        Lease[]
  approvals     ListingApproval[]
  predictions   PricePrediction[]

  @@index([city, state, country])
  @@index([status, isAvailable])
  @@map("properties")
}

/// Tabel pivot N:N antara Property dan Amenity.
model PropertyAmenity {
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  amenityId  String

  @@id([propertyId, amenityId])
  @@map("property_amenities")
}

// -----------------------------------------------------
// WORKFLOW APPROVAL LISTING
// -----------------------------------------------------

/// Riwayat dan keputusan review listing oleh admin.
model ListingApproval {
  id         String         @id @default(uuid())
  property   Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  reviewer   User?          @relation("ReviewerApprovals", fields: [reviewerId], references: [id])
  reviewerId String?
  status     ApprovalStatus @default(PENDING)
  notes      String?
  decidedAt  DateTime?
  createdAt  DateTime       @default(now())

  @@index([propertyId, status])
  @@map("listing_approvals")
}

// -----------------------------------------------------
// SEWA (LEASE) & PENAGIHAN
// -----------------------------------------------------

/// Kontrak sewa jangka waktu antara landlord dan tenant.
model Lease {
  id              String      @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  rentAmount      Decimal     @db.Decimal(12,2)
  currencyCode    String      @default("IDR")
  securityDeposit Decimal?    @db.Decimal(12,2)
  status          LeaseStatus @default(DRAFT)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relasi
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  propertyId String
  tenant     User     @relation("TenantLeases", fields: [tenantId], references: [id], onDelete: Restrict)
  tenantId   String
  landlord   User     @relation("LandlordLeases", fields: [landlordId], references: [id], onDelete: Restrict)
  landlordId String

  invoices   Invoice[]
  agreement  RentalAgreement?

  @@index([propertyId, status])
  @@index([tenantId])
  @@index([landlordId])
  @@map("leases")
}

/// Dokumen tagihan untuk lease (sewa/beban lainnya).
model Invoice {
  id           String        @id @default(uuid())
  lease        Lease         @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId      String
  type         InvoiceType   @default(RENT)
  amount       Decimal       @db.Decimal(12,2)
  currencyCode String        @default("IDR")
  dueDate      DateTime
  status       InvoiceStatus @default(DUE)
  issuedAt     DateTime      @default(now())
  paidAt       DateTime?
  memo         String?

  payments     Payment[]

  @@index([leaseId, status, dueDate])
  @@map("invoices")
}

/// Pencatatan pembayaran invoice (mendukung cicilan/multi-part).
model Payment {
  id         String        @id @default(uuid())
  invoice    Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId  String
  amount     Decimal       @db.Decimal(12,2)
  method     PaymentMethod @default(BANK_TRANSFER)
  status     PaymentStatus @default(PENDING)
  paidAt     DateTime?
  txnRef     String?
  createdAt  DateTime      @default(now())

  payer      User?         @relation(fields: [payerId], references: [id])
  payerId    String?

  @@index([invoiceId, status])
  @@map("payments")
}

// -----------------------------------------------------
// DOKUMEN PERJANJIAN & TANDA TANGAN
// -----------------------------------------------------

/// Perjanjian sewa (hasil generate PDF) untuk satu lease.
model RentalAgreement {
  id              String   @id @default(uuid())
  lease           Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId         String
  templateVersion String   // versi templat yang digunakan
  pdfUrl          String?  // lokasi file hasil generate
  fileHash        String?  // opsional untuk verifikasi integritas
  generatedAt     DateTime @default(now())

  clauses     AgreementClause[]
  signatures  ESignature[]

  @@unique([leaseId])
  @@map("rental_agreements")
}

/// Master klausul kontrak yang dapat diaktif/nonaktifkan per perjanjian.
model Clause {
  id        String  @id @default(uuid())
  key       String  @unique  // identifier unik, mis: "late_payment"
  title     String
  body      String
  category  String?
  isDefault Boolean @default(false)

  agreements AgreementClause[]

  @@map("clauses")
}

/// Pivot pemilihan klausul untuk satu perjanjian sewa.
model AgreementClause {
  id           String          @id @default(uuid())
  agreement    RentalAgreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  agreementId  String
  clause       Clause          @relation(fields: [clauseId], references: [id], onDelete: Cascade)
  clauseId     String
  enabled      Boolean         @default(true)

  @@unique([agreementId, clauseId])
  @@map("agreement_clauses")
}

/// Pencatatan proses tanda tangan elektronik.
model ESignature {
  id          String          @id @default(uuid())
  agreement   RentalAgreement @relation(fields: [agreementId], references: [id], onDelete: Cascade)
  agreementId String
  signer      User?           @relation(fields: [signerId], references: [id])
  signerId    String?
  role        SignerRole
  provider    ESignProvider   @default(INTERNAL)
  envelopeId  String?
  status      ESignStatus     @default(PENDING)
  signedAt    DateTime?
  createdAt   DateTime        @default(now())

  @@index([agreementId, status])
  @@map("e_signatures")
}

// -----------------------------------------------------
// PREDIKSI HARGA (simulator & evaluasi model)
// -----------------------------------------------------

/// Log prediksi harga (input mentah, harga prediksi, confidence, versi model).
model PricePrediction {
  id             String    @id @default(uuid())
  property       Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  propertyId     String?
  inputs         Json
  predictedPrice Decimal   @db.Decimal(12,2)
  confidence     Float
  modelVersion   String
  createdAt      DateTime  @default(now())

  @@index([propertyId, modelVersion])
  @@map("price_predictions")
}
